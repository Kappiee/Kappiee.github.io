import{_ as n,c as s,o as a,b as p}from"./app-BFW4Kyoc.js";const e={},t=p(`<h1 id="新增的对象字面量语法" tabindex="-1"><a class="header-anchor" href="#新增的对象字面量语法"><span>新增的对象字面量语法</span></a></h1><h2 id="成员速写" tabindex="-1"><a class="header-anchor" href="#成员速写"><span>成员速写</span></a></h2><p>如果对象字面量初始化时，成员的名称来自于一个变量，并且和变量的名称相同，则可以进行简写</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token parameter">loginId<span class="token punctuation">,</span> loginPwd<span class="token punctuation">,</span> nickName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;loginId&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loginId<span class="token punctuation">,</span> <span class="token string">&quot;nickname&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nickName<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// return {</span></span>
<span class="line">    <span class="token comment">//     loginId:loginId,</span></span>
<span class="line">    <span class="token comment">//     loginPwd:loginPwd,</span></span>
<span class="line">    <span class="token comment">//     nickName:nickName,</span></span>
<span class="line">    <span class="token comment">//     sayHello:sayHello,</span></span>
<span class="line">    <span class="token comment">//     id: Math.random()</span></span>
<span class="line">    <span class="token comment">// }</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        loginId<span class="token punctuation">,</span></span>
<span class="line">        loginPwd<span class="token punctuation">,</span></span>
<span class="line">        nickName<span class="token punctuation">,</span></span>
<span class="line">        sayHello<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">id</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">u<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法速写" tabindex="-1"><a class="header-anchor" href="#方法速写"><span>方法速写</span></a></h2><p>对象字面初始化时，方法可以省略冒号和function关键字</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;姬成&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// sayHello: function(){</span></span>
<span class="line">    <span class="token comment">//     console.log(this.name, this.age)</span></span>
<span class="line">    <span class="token comment">// }</span></span>
<span class="line">    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">user<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="计算属性名" tabindex="-1"><a class="header-anchor" href="#计算属性名"><span>计算属性名</span></a></h2><p>有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在ES6，可以使用中括号来表示该属性名是通过计算得到的。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> prop1 <span class="token operator">=</span> <span class="token string">&quot;name2&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> prop2 <span class="token operator">=</span> <span class="token string">&quot;age2&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> prop3 <span class="token operator">=</span> <span class="token string">&quot;sayHello2&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span>prop1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;姬成&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>prop2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>prop3<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>prop1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>prop2<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// user[prop1] = &quot;姬成&quot;</span></span>
<span class="line"></span>
<span class="line">user<span class="token punctuation">[</span>prop3<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),l=[t];function c(o,i){return a(),s("div",null,l)}const r=n(e,[["render",c],["__file","新增的对象字面量语法.html.vue"]]),d=JSON.parse('{"path":"/my-note/es6/4.%E5%AF%B9%E8%B1%A1/%E6%96%B0%E5%A2%9E%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95.html","title":"新增的对象字面量语法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"成员速写","slug":"成员速写","link":"#成员速写","children":[]},{"level":2,"title":"方法速写","slug":"方法速写","link":"#方法速写","children":[]},{"level":2,"title":"计算属性名","slug":"计算属性名","link":"#计算属性名","children":[]}],"git":{"updatedTime":1721203529000,"contributors":[{"name":"kappie","email":"1780409106@qq.com","commits":1}]},"filePathRelative":"my-note/es6/4.对象/新增的对象字面量语法.md"}');export{r as comp,d as data};
